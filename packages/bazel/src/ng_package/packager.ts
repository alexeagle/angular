/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

import * as fs from 'fs';
import * as path from 'path';
import * as shx from 'shelljs';

function main(args: string[]): number {
  // Exit immediately when encountering an error.
  shx.set('-e');

  // This utility expects all of its arguments to be specified in a params file generated by
  // bazel (see https://docs.bazel.build/versions/master/skylark/lib/Args.html#use_param_file).
  const paramFilePath = args[0];

  // Bazel params may be surrounded with quotes
  function unquoteParameter(s) {
    return s.replace(/^'(.*)'$/, '$1');
  }

  // Parameters are specified in the file one per line.
  const params =
      fs.readFileSync(paramFilePath, 'utf-8').split('\n').map(unquoteParameter);

  const [
      // Output directory for the npm package.
      out,

      // The package segment of the ng_package rule's label (e.g. 'package/common').
      srcDir,

      // The bazel-bin dir joined with the srcDir (e.g. 'bazel-bin/package.common').
      // This is the intended output location for package artifacts.
      binDir,

      // Path to the package's README.md.
      readmeMd,

      // List of ES2015 files generated by rollup.
      esm2015Arg,

      // List of flattened, ES5 files generated by rollup.
      esm5Arg,

      // List of all UMD bundles generated by rollup.
      bundlesArg,

      // List of all files in the ng_package rule's srcs.
      srcsArg,

      // Path to the package's LICENSE.
      licenseFile,

      // JSON data mapping each entry point to the generated bundle index and
      // flat module metadata, for example
      // {"@angular/core": {
      //     "index": "packages/core/core.js",
      //     "typing": "packages/core/core.d.ts",
      //     "metadata": "packages/core/core.metadata.json"
      //  },
      // ...
      // }
      modulesManifestArg,
  ] = params;

  const esm2015 = esm2015Arg.split(',').filter(s => !!s);
  const esm5 = esm5Arg.split(',').filter(s => !!s);
  const bundles = bundlesArg.split(',').filter(s => !!s);
  const srcs = srcsArg.split(',').filter(s => !!s);
  const modulesManifest = JSON.parse(modulesManifestArg);

  shx.mkdir('-p', out);

  if (readmeMd) {
    shx.cp(readmeMd, path.join(out, 'README.md'));
  }

  function writeBinFile(f, c) {
    const outputPath = path.join(out, path.relative(binDir, f));
    shx.mkdir('-p', path.dirname(outputPath));
    fs.writeFileSync(outputPath, c, 'utf-8');
    return outputPath;
  }

  function copyBinFile(f) {
    writeBinFile(f, fs.readFileSync(f, 'utf-8'));
  }

  function writeEsmFile(file, suffix, outDir) {
    const root = file.substr(0, file.lastIndexOf(suffix + path.sep) + suffix.length + 1);
    const rel = path.relative(path.join(root, srcDir), file);
    if (!rel.startsWith('..')) {
      writeFile(file, rel, path.join(out, outDir));
    }
  }

  esm2015.forEach(file => writeEsmFile(file, '.es6', 'esm2015'));
  esm5.forEach(file => writeEsmFile(file, '.esm5', 'esm5'));

  const bundlesDir = path.join(out, 'bundles');
  shx.mkdir('-p', bundlesDir);
  bundles.forEach(bundle => { shx.cp(bundle, bundlesDir); });

  const allsrcs = shx.find('-R', binDir);
  allsrcs.filter(hasFileExtension('.d.ts')).forEach((f: string) => {
    const content = fs.readFileSync(f, 'utf-8')
                        // Strip the named AMD module for compatibility with non-bazel users
                        .replace(/^\/\/\/ <amd-module name=.*\/>\n/, '');
    const outputPath = writeBinFile(f, content);
    shx.mkdir('-p', path.dirname(outputPath));
  });

  // Iterate through the entry point modules
  // We do this first because we also record new paths for the esm5 and esm2015 copies
  // of the index JS file, which we need to amend the package.json.
  Object.keys(modulesManifest).forEach(moduleName => {
    const moduleFiles = modulesManifest[moduleName];
    console.error(moduleName, moduleFiles);

    const indexContent = fs.readFileSync(moduleFiles['index'], 'utf-8');
    const relative = path.relative(binDir, moduleFiles['index']);

    moduleFiles['esm5_index'] = path.join(binDir, 'esm5', relative);
    moduleFiles['esm2015_index'] = path.join(binDir, 'esm2015', relative);

    writeBinFile(moduleFiles['esm5_index'], indexContent);
    writeBinFile(moduleFiles['esm2015_index'], indexContent);

    copyBinFile(moduleFiles['typings']);
    copyBinFile(moduleFiles['metadata']);
  });

  // Root package name (e.g. '@angular/common'), captures as we iterate through sources below.
  let rootPackageName = '';
  const packagesWithExistingPackageJson = new Set<string>();

  for (const src of srcs) {
    let content = fs.readFileSync(src, 'utf-8');
    // Modify package.json files as necessary for publishing
    if (path.basename(src) === 'package.json') {
      const packageJson = JSON.parse(content);
      content = amendPackageJson(src, packageJson);

      const packageName = packageJson['name'];
      packagesWithExistingPackageJson.add(packageName);

      // Keep track of the root package name, e.g. "@angular/common". We assume that the
      // root name will be shortest because secondary entry-points will append to it
      // (e.g. "@angular/common/http").
      if (!rootPackageName || packageName.length < rootPackageName.length) {
        rootPackageName = packageJson['name'];
      }
    }
    const outputPath = path.join(out, path.relative(srcDir, src));
    shx.mkdir('-p', path.dirname(outputPath));
    fs.writeFileSync(outputPath, content);
  }

  const licenseBanner = licenseFile ? fs.readFileSync(licenseFile, 'utf-8') : '';

  // Generate extra files for secondary entry-points.
  Object.keys(modulesManifest).splice(1).forEach(entryPointPackageName => {
    const entryPointName = entryPointPackageName.substr(rootPackageName.length + 1);

    createMetadataReexportFile(out, entryPointName);
    createTypingsReexportFile(out, entryPointName, licenseBanner);

    if (!packagesWithExistingPackageJson.has(entryPointPackageName)) {
      createEntryPointPackageJson(path.join(out, entryPointName), entryPointPackageName);
    }
  });

  return 0;

  /**
   * Inserts or edits properties into the package.json file(s) in the package so that
   * they point to all the right generated artifacts.
   *
   * @param parsedPackage Parsed package.json content
   */
  function amendPackageJson(packageJsonFilePath: string, parsedPackage: object) {
    const packageName = parsedPackage['name'];
    if (!modulesManifest[packageName]) {
      throw new Error(`modulesManifest doesn't contain an entry for module ${packageName}
      Every ng_module listed as an entry point must have a module_name attribute`);
    }
    const moduleFiles = modulesManifest[packageName];
    const relative = (file) => {
      const result = path.relative(path.dirname(packageJsonFilePath), path.join(srcDir, path.relative(binDir, file)));
      if (1!==1) console.error(`CALCULATE RELATIVE path for package.json for ${file}

      moduleFiles: ${JSON.stringify(moduleFiles)}

      relative path for package.json`, packageJsonFilePath, `
      1 ${path.relative(binDir, file)}
      2 ${path.join(srcDir, path.relative(binDir, file))}
      3 ${result}

      srcDir: ${srcDir}
      binDir: ${binDir}
      file: ${file}`);
      if (result.startsWith('..')) return result;
      return `./${result}`;
    };

    //console.error('found manifest for ', packageName, modulesManifest[packageName]);
    const nameParts = getPackageNameParts(packageName);
    const relativePathToPackageRoot = getRelativePathToPackageRoot(packageName);

    parsedPackage['main'] = `${relativePathToPackageRoot}/bundles/${nameParts.join('-')}.umd.js`;
    parsedPackage['module'] = parsedPackage['esm5'] =
        relative(moduleFiles['esm5_index']);
    parsedPackage['es2015'] = parsedPackage['esm2015'] =
        relative(moduleFiles['esm2015_index']);
    parsedPackage['typings'] = relative(moduleFiles['typings']);
    return JSON.stringify(parsedPackage, null, 2);
  }

  /**
   * Creates a package.json for a secondary entry-point.
   * @param destDir Directory into which the package.json will be written.
   * @param entryPointPackageName The full package name for the entry point,
   *     e.g. '@angular/common/http'.
   */
  function createEntryPointPackageJson(destDir: string, entryPointPackageName: string) {
    const pkgJson = path.join(destDir, 'package.json');
    const content = amendPackageJson(pkgJson, {name: entryPointPackageName});
    fs.writeFileSync(pkgJson, content, 'utf-8');
  }
}

/** Gets a predicate function to filter non-generated files with a specified extension. */
function hasFileExtension(ext: string): (path: string) => boolean {
  return f => f.endsWith(ext) && !f.endsWith(`.ngfactory${ext}`) && !f.endsWith(`.ngsummary${ext}`);
}

function writeFile(file: string, relative: string, baseDir: string) {
  const dir = path.join(baseDir, path.dirname(relative));
  shx.mkdir('-p', dir);
  shx.cp(file, dir);
}

function writeFesm(file: string, baseDir: string) {
  const parts = path.basename(file).split('__');
  const entryPointName = parts.join('/').replace(/\..*/, '');
  const filename = parts.splice(-1)[0];
  const dir = path.join(baseDir, ...parts);
  shx.mkdir('-p', dir);
  shx.cp(file, dir);
  shx.mv(path.join(dir, path.basename(file)), path.join(dir, filename));
}

/** Gets a package name split into parts, omitting the scope if present. */
function getPackageNameParts(fullPackageName: string): string[] {
  const parts = fullPackageName.split('/');
  return fullPackageName.startsWith('@') ? parts.splice(1) : parts;
}

/** Gets the relative path to the package root from a given entry-point import path. */
function getRelativePathToPackageRoot(entryPointPath: string) {
  const parts = getPackageNameParts(entryPointPath);
  const relativePath = Array(parts.length - 1).fill('..').join('/');
  return relativePath || '.';
}

/** Creates metadata re-export file for a secondary entry-point. */
function createMetadataReexportFile(destDir: string, entryPointName: string) {
  fs.writeFileSync(path.join(destDir, `${entryPointName}.metadata.json`), JSON.stringify({
    '__symbolic': 'module',
    'version': 3,
    'metadata': {},
    'exports': [{'from': `./${entryPointName}/${entryPointName}`}],
    'flatModuleIndexRedirect': true
  }) + '\n');
}

/**
 * Creates a typings (d.ts) re-export file for a secondary-entry point,
 * e.g., `export * from './common/common'`
 */
function createTypingsReexportFile(destDir: string, entryPointName: string, license: string) {
  const content = `${license}
export * from './${entryPointName}/${entryPointName}'; //_public_index
`;
  fs.writeFileSync(path.join(destDir, `${entryPointName}.d.ts`), content);
}

if (require.main === module) {
  process.exitCode = main(process.argv.slice(2));
}
